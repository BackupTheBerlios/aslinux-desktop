/****************************************************************************
**
** DCOP Skeleton generated by dcopidl2cpp from dcopdemoiface.kidl
**
** WARNING! All changes made in this file will be lost!
**
*****************************************************************************/

#include "dcopdemoiface.h"

#include <kdatastream.h>
#include <qasciidict.h>


static const int DCOPDemoIface_fhash = 13;
static const char* const DCOPDemoIface_ftable[12][3] = {
    { "void", "setLabel(QString)", "setLabel(QString str)" },
    { "void", "setSay(QString)", "setSay(QString str)" },
    { "void", "setShot(QString)", "setShot(QString str)" },
    { "void", "setTitle(QString)", "setTitle(QString str)" },
    { "void", "setProgreso(int)", "setProgreso(int p)" },
    { "void", "setProgresoP(unsigned long int)", "setProgresoP(unsigned long int p)" },
    { "int", "getFile(QString,QString)", "getFile(QString src,QString dst)" },
    { "int", "getStatus()", "getStatus()" },
    { "int", "errStatus()", "errStatus()" },
    { "int", "getWinId()", "getWinId()" },
    { "void", "shoshow()", "shoshow()" },
    { 0, 0, 0 }
};
static const int DCOPDemoIface_ftable_hiddens[11] = {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};

bool DCOPDemoIface::process(const QCString &fun, const QByteArray &data, QCString& replyType, QByteArray &replyData)
{
    static QAsciiDict<int>* fdict = 0;
    if ( !fdict ) {
	fdict = new QAsciiDict<int>( DCOPDemoIface_fhash, true, false );
	for ( int i = 0; DCOPDemoIface_ftable[i][1]; i++ )
	    fdict->insert( DCOPDemoIface_ftable[i][1],  new int( i ) );
    }
    int* fp = fdict->find( fun );
    switch ( fp?*fp:-1) {
    case 0: { // void setLabel(QString)
	QString arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = DCOPDemoIface_ftable[0][0]; 
	setLabel(arg0 );
    } break;
    case 1: { // void setSay(QString)
	QString arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = DCOPDemoIface_ftable[1][0]; 
	setSay(arg0 );
    } break;
    case 2: { // void setShot(QString)
	QString arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = DCOPDemoIface_ftable[2][0]; 
	setShot(arg0 );
    } break;
    case 3: { // void setTitle(QString)
	QString arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = DCOPDemoIface_ftable[3][0]; 
	setTitle(arg0 );
    } break;
    case 4: { // void setProgreso(int)
	int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = DCOPDemoIface_ftable[4][0]; 
	setProgreso(arg0 );
    } break;
    case 5: { // void setProgresoP(unsigned long int)
	unsigned long int arg0;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = DCOPDemoIface_ftable[5][0]; 
	setProgresoP(arg0 );
    } break;
    case 6: { // int getFile(QString,QString)
	QString arg0;
	QString arg1;
	QDataStream arg( data, IO_ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	if (arg.atEnd()) return false;
	arg >> arg1;
	replyType = DCOPDemoIface_ftable[6][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << getFile(arg0, arg1 );
    } break;
    case 7: { // int getStatus()
	replyType = DCOPDemoIface_ftable[7][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << getStatus( );
    } break;
    case 8: { // int errStatus()
	replyType = DCOPDemoIface_ftable[8][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << errStatus( );
    } break;
    case 9: { // int getWinId()
	replyType = DCOPDemoIface_ftable[9][0]; 
	QDataStream _replyStream( replyData, IO_WriteOnly );
	_replyStream << getWinId( );
    } break;
    case 10: { // void shoshow()
	replyType = DCOPDemoIface_ftable[10][0]; 
	shoshow( );
    } break;
    default: 
	return DCOPObject::process( fun, data, replyType, replyData );
    }
    return true;
}

QCStringList DCOPDemoIface::interfaces()
{
    QCStringList ifaces = DCOPObject::interfaces();
    ifaces += "DCOPDemoIface";
    return ifaces;
}

QCStringList DCOPDemoIface::functions()
{
    QCStringList funcs = DCOPObject::functions();
    for ( int i = 0; DCOPDemoIface_ftable[i][2]; i++ ) {
	if (DCOPDemoIface_ftable_hiddens[i])
	    continue;
	QCString func = DCOPDemoIface_ftable[i][0];
	func += ' ';
	func += DCOPDemoIface_ftable[i][2];
	funcs << func;
    }
    return funcs;
}


